import io
import os
from typing import Tuple

from ndpi_tiler.huffman import HuffmanTable, HuffmanTableIdentifier
from ndpi_tiler.jpeg import Component, JpegHeader, JpegScan
from tifffile import FileHandle, TiffFile, TiffPage

tif_test_data_dir = os.environ.get("TIF_TESTDIR", "C:/temp/tif")
tif_test_file_name = "test.ndpi"
tif_test_file_path = tif_test_data_dir + '/' + tif_test_file_name


def create_small_header() -> JpegHeader:
    table_0 = HuffmanTable(
        HuffmanTableIdentifier('DC', 0),
        [
            [],
            [],
            [0x04, 0x05, 0x03, 0x02, 0x06, 0x01, 0x00],
            [0x07],
            [0x08],
            [0x09],
            [0x0A],
            [0x0B]
        ])
    table_1 = HuffmanTable(
        HuffmanTableIdentifier('DC', 1),
        [
            [],
            [0x01, 0x00],
            [0x02, 0x03],
            [0x04, 0x05, 0x06],
            [0x07],
            [0x08],
            [0x09],
            [0x0A],
            [0x0B]
        ])
    table_16 = HuffmanTable(
        HuffmanTableIdentifier('AC', 0),
        [
            [],
            [0x01, 0x02],
            [0x03],
            [0x11, 0x04, 0x00],
            [0x05, 0x21, 0x12],
            [0x31, 0x41],
            [0x51, 0x06, 0x13, 0x61],
            [0x22, 0x71],
            [0x81, 0x14, 0x32, 0x91, 0xA1, 0x07],
            [0x15, 0xB1, 0x42, 0x23, 0xC1, 0x52, 0xD1],
            [0xE1, 0x33, 0x16],
            [0x62, 0xF0, 0x24, 0x72],
            [0x82, 0xF1],
            [0x25, 0x43, 0x34, 0x53, 0x92, 0xA2],
            [0xB2, 0x63],
            [
                0x73, 0xC2, 0x35, 0x44, 0x27, 0x93, 0xA3, 0xB3, 0x36, 0x17,
                0x54, 0x64, 0x74, 0xC3, 0xD2, 0xE2, 0x08, 0x26, 0x83, 0x09,
                0x0A, 0x18, 0x19, 0x84, 0x94, 0x45, 0x46, 0xA4, 0xB4, 0x56,
                0xD3, 0x55, 0x28, 0x1A, 0xF2, 0xE3, 0xF3, 0xC4, 0xD4, 0xE4,
                0xF4, 0x65, 0x75, 0x85, 0x95, 0xA5, 0xB5, 0xC5, 0xD5, 0xE5,
                0xF5, 0x66, 0x76, 0x86, 0x96, 0xA6, 0xB6, 0xC6, 0xD6, 0xE6,
                0xF6, 0x37, 0x47, 0x57, 0x67, 0x77, 0x87, 0x97, 0xA7, 0xB7,
                0xC7, 0xD7, 0xE7, 0xF7, 0x38, 0x48, 0x58, 0x68, 0x78, 0x88,
                0x98, 0xA8, 0xB8, 0xC8, 0xD8, 0xE8, 0xF8, 0x29, 0x39, 0x49,
                0x59, 0x69, 0x79, 0x89, 0x99, 0xA9, 0xB9, 0xC9, 0xD9, 0xE9,
                0xF9, 0x2A, 0x3A, 0x4A, 0x5A, 0x6A, 0x7A, 0x8A, 0x9A, 0xAA,
                0xBA, 0xCA, 0xDA, 0xEA, 0xFA
            ]
        ])
    table_17 = HuffmanTable(
        HuffmanTableIdentifier('AC', 1),
        [
            [],
            [0x01, 0x00],
            [0x02, 0x11],
            [0x03],
            [0x04, 0x21],
            [0x12, 0x31, 0x41],
            [0x05, 0x51, 0x13, 0x61, 0x22],
            [0x06, 0x71, 0x81, 0x91, 0x32],
            [0xA1, 0xB1, 0xF0, 0x14],
            [0xC1, 0xD1, 0xE1, 0x23, 0x42],
            [0x15, 0x52, 0x62, 0x72, 0xF1, 0x33],
            [0x24, 0x34, 0x43, 0x82],
            [0x16, 0x92, 0x53, 0x25, 0xA2, 0x63, 0xB2, 0xC2],
            [0x07, 0x73, 0xD2],
            [0x35, 0xE2, 0x44],
            [
                0x83, 0x17, 0x54, 0x93, 0x08, 0x09, 0x0A, 0x18, 0x19, 0x26,
                0x36, 0x45, 0x1A, 0x27, 0x64, 0x74, 0x55, 0x37, 0xF2, 0xA3,
                0xB3, 0xC3, 0x28, 0x29, 0xD3, 0xE3, 0xF3, 0x84, 0x94, 0xA4,
                0xB4, 0xC4, 0xD4, 0xE4, 0xF4, 0x65, 0x75, 0x85, 0x95, 0xA5,
                0xB5, 0xC5, 0xD5, 0xE5, 0xF5, 0x46, 0x56, 0x66, 0x76, 0x86,
                0x96, 0xA6, 0xB6, 0xC6, 0xD6, 0xE6, 0xF6, 0x47, 0x57, 0x67,
                0x77, 0x87, 0x97, 0xA7, 0xB7, 0xC7, 0xD7, 0xE7, 0xF7, 0x38,
                0x48, 0x58, 0x68, 0x78, 0x88, 0x98, 0xA8, 0xB8, 0xC8, 0xD8,
                0xE8, 0xF8, 0x39, 0x49, 0x59, 0x69, 0x79, 0x89, 0x99, 0xA9,
                0xB9, 0xC9, 0xD9, 0xE9, 0xF9, 0x2A, 0x3A, 0x4A, 0x5A, 0x6A,
                0x7A, 0x8A, 0x9A, 0xAA, 0xBA, 0xCA, 0xDA, 0xEA, 0xFA
            ]
        ])

    return JpegHeader(
        width=16,
        height=8,
        components=[
            Component(
                'Y',
                table_0.identifier,
                table_16.identifier,
                table_0,
                table_16
            ),
            Component(
                'Cb',
                table_1.identifier,
                table_17.identifier,
                table_1,
                table_17
            ),
            Component(
                'Cr',
                table_1.identifier,
                table_17.identifier,
                table_1,
                table_17
            )
        ]
    )


def create_small_scan_data() -> Tuple[FileHandle, int]:
    jpeg_bytes = bytes(
        [0xFC, 0xFF, 0x00, 0xE2, 0xAF, 0xEF, 0xF3, 0x15, 0x7F, 0xFF, 0xD9]
    )
    return FileHandle(io.BytesIO(jpeg_bytes)), 0


def create_small_scan(header: JpegHeader) -> JpegScan:
    fh, offset = create_small_scan_data()
    return JpegScan(header, fh, offset, 2)


def create_large_header(page: TiffPage) -> JpegHeader:
    return JpegHeader.from_bytes(page.jpegheader)


def create_large_scan_data(tif: TiffFile) -> Tuple[FileHandle, int]:
    page = get_page(tif)
    file_handle = tif.filehandle
    stripe_offset = page.dataoffsets[0]

    stripe_length = page.databytecounts[0]
    file_handle.seek(stripe_offset)
    stripe: bytes = file_handle.read(stripe_length)
    print(stripe.hex())

    print(f"strip offset is {stripe_offset}")
    return file_handle, stripe_offset
    stripe_length = page.databytecounts[0]
    file_handle.seek(stripe_offset)
    stripe: bytes = file_handle.read(stripe_length)
    return stripe


def create_large_scan(
    header: JpegHeader,
    fh: FileHandle,
    offset: int
) -> JpegScan:
    return JpegScan(header, fh, offset, 512)


def save_scan_as_jpeg(jpeg_header: bytes, scan: bytes):
    f = open("scan.jpeg", "wb")
    f.write(jpeg_header)
    f.write(scan)
    f.write(bytes([0xFF, 0xD9]))  # End of Image Tag
    f.close()


def open_tif() -> TiffFile:
    return TiffFile(tif_test_file_path)


def get_page(tif: TiffFile) -> TiffPage:
    return tif.series[0].levels[0].pages[0]

from collections.abc import MutableMapping
from typing import Any, Dict, Iterator, List, Tuple, Union
import threading
import numpy as np

def imread(files: Any | None = ..., aszarr: bool = ..., **kwargs): ...
def imwrite(file, data: Any | None = ..., shape: Any | None = ..., dtype: Any | None = ..., **kwargs): ...
def memmap(filename, shape: Any | None = ..., dtype: Any | None = ..., page: Any | None = ..., series: int = ..., level: int = ..., mode: str = ..., **kwargs): ...

class lazyattr:
    func: Any
    __doc__: Any
    __module__: Any
    __name__: Any
    __qualname__: Any
    def __init__(self, func) -> None: ...
    def __get__(self, instance, owner): ...

class TiffFileError(Exception): ...

class TiffWriter:
    tiff: Any
    def __init__(self, file, bigtiff: bool = ..., byteorder: Any | None = ..., append: bool = ..., imagej: bool = ..., ome: Any | None = ...) -> None: ...
    @property
    def filehandle(self): ...
    def write(self, data: Any | None = ..., shape: Any | None = ..., dtype: Any | None = ..., photometric: Any | None = ..., planarconfig: Any | None = ..., extrasamples: Any | None = ..., volumetric: bool = ..., tile: Any | None = ..., contiguous: bool = ..., truncate: bool = ..., align: Any | None = ..., rowsperstrip: Any | None = ..., bitspersample: Any | None = ..., compression: Any | None = ..., predictor: Any | None = ..., subsampling: Any | None = ..., jpegtables: Any | None = ..., colormap: Any | None = ..., description: Any | None = ..., datetime: Any | None = ..., resolution: Any | None = ..., subfiletype: int = ..., software: Any | None = ..., subifds: Any | None = ..., metadata=..., extratags=..., returnoffset: bool = ..., ijmetadata: Any | None = ..., compress: Any | None = ...): ...
    def overwrite_description(self, description) -> None: ...
    def close(self) -> None: ...
    def __enter__(self): ...
    def __exit__(self, exc_type, exc_value, traceback) -> None: ...

class TiffFile:
    tiff: Any
    pages: TiffPages
    def __init__(self, arg, mode: Any | None = ..., name: Any | None = ..., offset: Any | None = ..., size: Any | None = ..., _multifile: bool = ..., _useframes: Any | None = ..., _parent: Any | None = ..., **kwargs) -> None: ...
    @property
    def byteorder(self): ...
    @property
    def filehandle(self) -> FileHandle: ...
    @property
    def filename(self) -> str: ...
    def fstat(self): ...
    def close(self) -> None: ...
    def asarray(self, key: Any | None = ..., series: Any | None = ..., level: Any | None = ..., squeeze: Any | None = ..., out: Any | None = ..., maxworkers: Any | None = ...): ...
    def aszarr(self, key: Any | None = ..., series: Any | None = ..., level: Any | None = ..., **kwargs): ...
    @property
    def series(self) -> List[TiffPageSeries]: ...
    def __getattr__(self, name): ...
    def __enter__(self): ...
    def __exit__(self, exc_type, exc_value, traceback) -> None: ...
    @property
    def flags(self): ...
    @property
    def is_bigtiff(self) -> bool: ...
    @property
    def is_mdgel(self) -> bool: ...
    @property
    def is_uniform(self) -> bool: ...
    @property
    def is_appendable(self): ...
    @property
    def shaped_metadata(self) -> Dict[str, Any]: ...
    @property
    def ome_metadata(self) -> Dict[str, Any]: ...
    @property
    def scn_metadata(self) -> Dict[str, Any]: ...
    @property
    def philips_metadata(self) -> Dict[str, Any]: ...
    @property
    def lsm_metadata(self) -> Dict[str, Any]: ...
    @property
    def stk_metadata(self) -> Dict[str, Any]: ...
    @property
    def imagej_metadata(self) -> Dict[str, Any]: ...
    @property
    def fluoview_metadata(self) -> Dict[str, Any]: ...
    @property
    def nih_metadata(self) -> Dict[str, Any]: ...
    @property
    def fei_metadata(self) -> Dict[str, Any]: ...
    @property
    def sem_metadata(self) -> Dict[str, Any]: ...
    @property
    def sis_metadata(self) -> Dict[str, Any]: ...
    @property
    def mdgel_metadata(self) -> Dict[str, Any]: ...
    @property
    def andor_metadata(self) -> Dict[str, Any]: ...
    @property
    def epics_metadata(self) -> Dict[str, Any]: ...
    @property
    def tvips_metadata(self) -> Dict[str, Any]: ...
    @property
    def metaseries_metadata(self) -> Dict[str, Any]: ...
    @property
    def pilatus_metadata(self) -> Dict[str, Any]: ...
    @property
    def micromanager_metadata(self) -> Dict[str, Any]: ...
    @property
    def scanimage_metadata(self) -> Dict[str, Any]: ...
    @property
    def geotiff_metadata(self) -> Dict[str, Any]: ...
    @property
    def eer_metadata(self) -> Dict[str, Any]: ...

class TiffPages:
    parent: Any
    pages: List[TiffPage]
    def __init__(self, arg, index: Any | None = ...) -> None: ...
    @property
    def cache(self): ...
    @cache.setter
    def cache(self, value) -> None: ...
    @property
    def useframes(self): ...
    @useframes.setter
    def useframes(self, value) -> None: ...
    @property
    def keyframe(self): ...
    @keyframe.setter
    def keyframe(self, index) -> None: ...
    @property
    def next_page_offset(self): ...
    def get(self, key, default: Any | None = ..., validate: bool = ..., cache: Any | None = ..., aspage: bool = ...): ...
    def __getitem__(self, key) -> TiffPage: ...
    def __iter__(self) -> Iterator[TiffPage]: ...
    def __bool__(self) -> bool: ...
    def __len__(self) -> int: ...

class TiffPage:
    subfiletype: int
    imagewidth: int
    imagelength: int
    imagedepth: int
    tilewidth: int
    tilelength: int
    tiledepth: int
    bitspersample: int
    samplesperpixel: int
    sampleformat: int
    rowsperstrip: Any
    compression: int
    planarconfig: int
    fillorder: int
    photometric: int
    predictor: int
    extrasamples: Any
    subsampling: Any
    subifds: Any
    jpegtables: Any
    jpegheader: Any
    colormap: Any
    software: str
    description: str
    description1: str
    nodata: int
    parent: Any
    index: Any
    shape: Any
    shaped: Any
    dtype: np.dtype
    axes: str
    tags: TiffTags
    dataoffsets: List[int]
    databytecounts: List[int]
    offset: Any
    def __init__(self, parent, index, keyframe: Any | None = ...) -> None: ...
    def decode(self, data: bytes, segmentindex: int, **kwargs) -> Tuple[np.ndarray, Tuple[int, int, int, int, int], Tuple[int, int, int, int]]: ...
    def segments(self, lock: Any | None = ..., maxworkers: Any | None = ..., func: Any | None = ..., sort: bool = ..., _fullsize: Any | None = ...): ...
    def asarray(self, out: Any | None = ..., squeeze: bool = ..., lock: Any | None = ..., maxworkers: Any | None = ...): ...
    def aszarr(self, **kwargs): ...
    def asrgb(self, uint8: bool = ..., alpha: Any | None = ..., colormap: Any | None = ..., dmin: Any | None = ..., dmax: Any | None = ..., **kwargs): ...
    def aspage(self): ...
    @property
    def keyframe(self): ...
    @keyframe.setter
    def keyframe(self, index) -> None: ...
    @property
    def ndim(self): ...
    @property
    def size(self): ...
    @property
    def nbytes(self): ...
    @property
    def chunks(self) -> Tuple[int, int, int]: ...
    @property
    def chunked(self): ...
    def hash(self): ...
    @property
    def pages(self) -> TiffPages: ...
    def maxworkers(self): ...
    @property
    def is_contiguous(self)  -> bool: ...
    @property
    def is_final(self)  -> bool: ...
    @property
    def is_memmappable(self)  -> bool: ...
    def flags(self): ...
    def andor_tags(self): ...
    def epics_tags(self): ...
    @property
    def ndpi_tags(self) -> Dict[str, Any]: ...
    def geotiff_tags(self): ...
    @property
    def is_reduced(self) -> bool: ...
    @property
    def is_multipage(self) -> bool: ...
    @property
    def is_mask(self) -> bool: ...
    @property
    def is_mrc(self) -> bool: ...
    @property
    def is_tiled(self) -> bool: ...
    @property
    def is_subsampled(self) -> bool: ...
    @property
    def is_imagej(self) -> bool: ...
    @property
    def is_shaped(self) -> bool: ...
    @property
    def is_mdgel(self) -> bool: ...
    @property
    def is_mediacy(self) -> bool: ...
    @property
    def is_stk(self) -> bool: ...
    @property
    def is_lsm(self) -> bool: ...
    @property
    def is_fluoview(self) -> bool: ...
    @property
    def is_nih(self) -> bool: ...
    @property
    def is_volumetric(self) -> bool: ...
    @property
    def is_vista(self) -> bool: ...
    @property
    def is_metaseries(self) -> bool: ...
    @property
    def is_ome(self) -> bool: ...
    @property
    def is_scn(self) -> bool: ...
    @property
    def is_micromanager(self) -> bool: ...
    @property
    def is_andor(self) -> bool: ...
    @property
    def is_pilatus(self) -> bool: ...
    @property
    def is_epics(self) -> bool: ...
    @property
    def is_tvips(self) -> bool: ...
    @property
    def is_fei(self) -> bool: ...
    @property
    def is_sem(self) -> bool: ...
    @property
    def is_svs(self) -> bool: ...
    @property
    def is_bif(self) -> bool: ...
    @property
    def is_scanimage(self) -> bool: ...
    @property
    def is_qpi(self) -> bool: ...
    @property
    def is_geotiff(self) -> bool: ...
    @property
    def is_tiffep(self) -> bool: ...
    @property
    def is_sis(self) -> bool: ...
    @property
    def is_ndpi(self) -> bool: ...
    @property
    def is_philips(self) -> bool: ...
    @property
    def is_eer(self) -> bool: ...

class TiffFrame:
    is_mdgel: bool
    pages: Any
    parent: Any
    index: Any
    offset: Any
    subifds: Any
    jpegtables: Any
    dataoffsets: List[int]
    databytecounts: List[int]
    def __init__(self, parent, index, offset: Any | None = ..., keyframe: Any | None = ..., offsets: Any | None = ..., bytecounts: Any | None = ...) -> None: ...
    def aspage(self): ...
    def asarray(self, *args, **kwargs): ...
    def aszarr(self, **kwargs): ...
    def asrgb(self, *args, **kwargs): ...
    def segments(self, *args, **kwargs): ...
    @property
    def keyframe(self): ...
    @keyframe.setter
    def keyframe(self, keyframe) -> None: ...
    @property
    def is_contiguous(self): ...
    @property
    def is_memmappable(self): ...
    @property
    def hash(self): ...
    def __getattr__(self, name): ...

class TiffTag:
    parent: Any
    offset: Any
    code: Any
    dtype: Any
    count: Any
    value: Any
    valueoffset: Any
    def __init__(self, parent, offset, code, dtype, count, value, valueoffset) -> None: ...
    @classmethod
    def fromfile(cls, parent, offset: Any | None = ..., header: Any | None = ...): ...
    @property
    def name(self) -> str: ...
    @property
    def dataformat(self): ...
    @property
    def valuebytecount(self): ...
    def overwrite(self, value, _arg: Any | None = ..., dtype: Any | None = ..., erase: bool = ...): ...

class TiffTags:
    def __init__(self) -> None: ...
    def add(self, tag: TiffTag) -> None: ...
    def keys(self): ...
    def values(self): ...
    def items(self): ...
    def get(self, key, default: Any | None = ..., index: Any | None = ...): ...
    def getall(self, key, default: Any | None = ...): ...
    def __getitem__(self, key: str) -> TiffTag: ...
    def __setitem__(self, code, tag) -> None: ...
    def __delitem__(self, key) -> None: ...
    def __contains__(self, item): ...
    def __iter__(self) -> Iterator[TiffTag]: ...
    def __len__(self) -> int: ...

class TiffTagRegistry:
    def __init__(self, arg) -> None: ...
    def update(self, arg) -> None: ...
    def add(self, code, name) -> None: ...
    def items(self): ...
    def get(self, key, default: Any | None = ...): ...
    def getall(self, key, default: Any | None = ...): ...
    def __getitem__(self, key): ...
    def __delitem__(self, key) -> None: ...
    def __contains__(self, item): ...
    def __iter__(self): ...
    def __len__(self): ...

class TiffPageSeries:
    index: int
    levels: List[TiffPageSeries]
    dtype: np.dtype
    kind: str
    name: str
    transform: Any
    keyframe: Any
    is_multifile: bool
    parent: Any
    def __init__(self, pages, shape: Any | None = ..., dtype: Any | None = ..., axes: Any | None = ..., parent: Any | None = ..., name: Any | None = ..., transform: Any | None = ..., kind: Any | None = ..., truncated: bool = ..., multifile: bool = ..., squeeze: bool = ...) -> None: ...
    shape: Tuple
    axes: str
    def set_shape_axes(self, shape, axes, squeeze: bool = ...) -> None: ...
    def get_shape(self, squeeze: Any | None = ...): ...
    def get_axes(self, squeeze: Any | None = ...): ...
    def asarray(self, level: Any | None = ..., **kwargs): ...
    def aszarr(self, level: Any | None = ..., **kwargs): ...
    def offset(self): ...
    @property
    def is_pyramidal(self) -> bool: ...
    @property
    def ndim(self) -> int: ...
    @property
    def size(self) -> int: ...
    @property
    def pages(self) -> TiffPageSeries: ...
    def __getitem__(self, key: int) -> TiffPage: ...
    def __iter__(self) -> Iterator[TiffPage]: ...
    def __len__(self) -> int: ...

class ZarrStore(MutableMapping):
    def __init__(self, fillvalue: Any | None = ..., chunkmode: Any | None = ...) -> None: ...
    def __enter__(self): ...
    def __exit__(self, exc_type, exc_value, traceback) -> None: ...
    def __del__(self) -> None: ...
    def close(self) -> None: ...
    def flush(self) -> None: ...
    def clear(self) -> None: ...
    def keys(self): ...
    def items(self): ...
    def values(self): ...
    def __iter__(self): ...
    def __len__(self): ...
    def __delitem__(self, key) -> None: ...
    def __contains__(self, key): ...
    def __setitem__(self, key, value) -> None: ...
    def __getitem__(self, key): ...
    @property
    def is_multiscales(self): ...

class ZarrTiffStore(ZarrStore):
    def __init__(self, arg, level: Any | None = ..., chunkmode: Any | None = ..., fillvalue: Any | None = ..., lock: Any | None = ..., squeeze: Any | None = ..., _openfiles: Any | None = ...) -> None: ...
    def close(self) -> None: ...
    def write_fsspec(self, arg, url, compressors: Any | None = ..., version: Any | None = ...) -> None: ...

class ZarrFileSequenceStore(ZarrStore):
    def __init__(self, arg, fillvalue: Any | None = ..., chunkmode: Any | None = ..., **kwargs) -> None: ...
    def close(self) -> None: ...
    def write_fsspec(self, arg, url, codec_id: Any | None = ..., version: Any | None = ...) -> None: ...

class FileSequence:
    imread: Any
    files: Any
    pattern: Any
    axes: Any
    shape: Any
    indices: Any
    def __init__(self, imread, files, container: Any | None = ..., sort: Any | None = ..., pattern: Any | None = ..., axesorder: Any | None = ...): ...
    def __len__(self): ...
    def __enter__(self): ...
    def __exit__(self, exc_type, exc_value, traceback) -> None: ...
    def close(self) -> None: ...
    def asarray(self, file: Any | None = ..., ioworkers: int = ..., out: Any | None = ..., **kwargs): ...
    def aszarr(self, **kwargs): ...
    def commonpath(self): ...

class TiffSequence(FileSequence):
    def __init__(self, files: Any | None = ..., container: Any | None = ..., sort: Any | None = ..., pattern: Any | None = ..., axesorder: Any | None = ..., imread=...) -> None: ...

class FileHandle:
    is_file: Any
    def __init__(self, file, mode: Any | None = ..., name: Any | None = ..., offset: Any | None = ..., size: Any | None = ...) -> None: ...
    def open(self) -> None: ...
    def close(self) -> None: ...
    def tell(self): ...
    def seek(self, offset: int, whence: int = ...) -> None: ...
    def read(self, size: int = ...) -> bytes: ...
    def readinto(self, b) -> int: ...
    def write(self, bytestring: bytes): ...
    def flush(self): ...
    def memmap_array(self, dtype, shape, offset: int = ..., mode: str = ..., order: str = ...): ...
    def read_array(self, dtype, count: int = ..., out: Any | None = ...): ...
    def read_record(self, dtype, shape: int = ..., byteorder: Any | None = ...): ...
    def write_empty(self, size) -> None: ...
    def write_array(self, data) -> None: ...
    def read_segments(self, offsets, bytecounts, indices: Any | None = ..., sort: bool = ..., lock: Any | None = ..., buffersize: Any | None = ..., flat: bool = ...): ...
    def __enter__(self): ...
    def __exit__(self, exc_type, exc_value, traceback) -> None: ...
    def __getattr__(self, name): ...
    @property
    def name(self) -> str: ...
    @property
    def dirname(self) -> str: ...
    @property
    def path(self) -> str: ...
    @property
    def size(self) -> int: ...
    @property
    def closed(self) -> bool: ...
    @property
    def lock(self) -> Union[threading.RLock, NullContext]: ...
    @lock.setter
    def lock(self, value) -> None: ...
    @property
    def has_lock(self) -> bool: ...

class FileCache:
    past: Any
    files: Any
    keep: Any
    lock: Any
    size: Any
    def __init__(self, size: Any | None = ..., lock: Any | None = ...) -> None: ...
    def __len__(self): ...
    def open(self, filehandle) -> None: ...
    def close(self, filehandle) -> None: ...
    def clear(self) -> None: ...
    def read(self, filehandle, offset, bytecount, whence: int = ...): ...

class NullContext:
    def __enter__(self): ...
    def __exit__(self, exc_type, exc_value, traceback) -> None: ...

class Timer:
    clock: Any
    duration: int
    started: Any
    def __init__(self, message: Any | None = ..., end: str = ...) -> None: ...
    def start(self, message: Any | None = ..., end: str = ...): ...
    stopped: Any
    def stop(self, message: Any | None = ..., end: str = ...): ...
    def print(self, message: Any | None = ..., end: Any | None = ...) -> None: ...
    def __enter__(self): ...
    def __exit__(self, exc_type, exc_value, traceback) -> None: ...

class OmeXmlError(Exception): ...

class OmeXml:
    ifd: int
    images: Any
    annotations: Any
    elements: Any
    uuid: Any
    xml: Any
    def __init__(self, **metadata) -> None: ...
    def addimage(self, dtype, shape, storedshape, axes: Any | None = ..., **metadata) -> None: ...
    def tostring(self, declaration: bool = ...): ...
    @staticmethod
    def validate(omexml, omexsd: Any | None = ..., assert_: bool = ..., _schema=...): ...

class LazyConst:
    __doc__: Any
    __module__: Any
    __name__: Any
    __qualname__: Any
    lock: Any
    def __init__(self, cls) -> None: ...
    def __reduce__(self): ...
    def __getattr__(self, name): ...

class TIFF:
    def CLASSIC_LE(): ...
    def CLASSIC_BE(): ...
    def BIG_LE(): ...
    def BIG_BE(): ...
    def NDPI_LE(): ...
    def TAGS(): ...
    def TAG_READERS(): ...
    def TAG_TUPLE(): ...
    def TAG_ATTRIBUTES(): ...
    def TAG_ENUM(): ...
    def FILETYPE(): ...
    def OFILETYPE(): ...
    def COMPRESSION(): ...
    def PHOTOMETRIC(): ...
    def PHOTOMETRIC_SAMPLES(): ...
    def THRESHHOLD(): ...
    def FILLORDER(): ...
    def ORIENTATION(): ...
    def PLANARCONFIG(): ...
    def GRAYRESPONSEUNIT(): ...
    def GROUP4OPT(): ...
    def RESUNIT(): ...
    def COLORRESPONSEUNIT(): ...
    def PREDICTOR(): ...
    def EXTRASAMPLE(): ...
    def SAMPLEFORMAT(): ...
    def DATATYPES(): ...
    def DATA_FORMATS(): ...
    def DATA_DTYPES(): ...
    def SAMPLE_DTYPES(): ...
    def PREDICTORS(): ...
    def UNPREDICTORS(): ...
    def COMPRESSORS(): ...
    def DECOMPRESSORS(): ...
    def FRAME_ATTRS(): ...
    def FILE_FLAGS(): ...
    def FILE_PATTERNS(): ...
    def FILE_EXTENSIONS(): ...
    def FILEOPEN_FILTER(): ...
    def AXES_LABELS(): ...
    def NDPI_TAGS(): ...
    def EXIF_TAGS(): ...
    def GPS_TAGS(): ...
    def IOP_TAGS(): ...
    def GEO_KEYS(): ...
    def GEO_CODES(): ...
    def CZ_LSMINFO(): ...
    def CZ_LSMINFO_READERS(): ...
    def CZ_LSMINFO_SCANTYPE(): ...
    def CZ_LSMINFO_DIMENSIONS(): ...
    def CZ_LSMINFO_DATATYPES(): ...
    def CZ_LSMINFO_TYPEOFDATA(): ...
    def CZ_LSMINFO_SCANINFO_ARRAYS(): ...
    def CZ_LSMINFO_SCANINFO_STRUCTS(): ...
    def CZ_LSMINFO_SCANINFO_ATTRIBUTES(): ...
    def CZ_LSM_LUTTYPE(): ...
    def CZ_LSM_SUBBLOCK_TYPE(): ...
    def NIH_IMAGE_HEADER(): ...
    def NIH_COLORTABLE_TYPE(): ...
    def NIH_LUTMODE_TYPE(): ...
    def NIH_CURVEFIT_TYPE(): ...
    def NIH_UNITS_TYPE(): ...
    def TVIPS_HEADER_V1(): ...
    def TVIPS_HEADER_V2(): ...
    def MM_HEADER(): ...
    def MM_DIMENSIONS(): ...
    def UIC_TAGS(): ...
    def PILATUS_HEADER(): ...
    def ALLOCATIONGRANULARITY(): ...
    def MAXWORKERS(): ...
    def CHUNKMODE(): ...

def read_scanimage_metadata(fh): ...
def read_micromanager_metadata(fh): ...
def repeat_nd(a, repeats): ...
def reshape_nd(data_or_shape, ndim): ...
def squeeze_axes(shape, axes, skip: Any | None = ...): ...
def transpose_axes(image, axes, asaxes: Any | None = ...): ...
def reshape_axes(axes, shape, newshape, unknown: Any | None = ...): ...
def create_output(out, shape, dtype, mode: str = ..., suffix: Any | None = ...): ...
def matlabstr2py(string): ...
def stripnull(string, null: bytes = ..., first: bool = ...): ...
def astype(value, types: Any | None = ...): ...
def format_size(size, threshold: int = ...): ...
def nullfunc(*args, **kwargs) -> None: ...
def product(iterable): ...
def natural_sorted(iterable): ...
def xml2dict(xml, sanitize: bool = ..., prefix: Any | None = ...): ...
def pformat(arg, width: int = ..., height: int = ..., compact: bool = ...): ...
def enumstr(enum): ...
def enumarg(enum, arg): ...
def parse_kwargs(kwargs, *keys, **keyvalues): ...
def update_kwargs(kwargs, **keyvalues) -> None: ...
def tiffcomment(arg, comment: Any | None = ..., index: Any | None = ..., code: Any | None = ...): ...
def tiff2fsspec(filename, url, out: Any | None = ..., key: Any | None = ..., series: Any | None = ..., level: Any | None = ..., chunkmode: Any | None = ..., version: Any | None = ...) -> None: ...
def lsm2bin(lsmfile, binfile: Any | None = ..., tile: Any | None = ..., verbose: bool = ...) -> None: ...
def imshow(data, photometric: Any | None = ..., planarconfig: Any | None = ..., bitspersample: Any | None = ..., nodata: int = ..., interpolation: Any | None = ..., cmap: Any | None = ..., vmin: Any | None = ..., vmax: Any | None = ..., figure: Any | None = ..., title: Any | None = ..., dpi: int = ..., subplot: Any | None = ..., maxdim: Any | None = ..., **kwargs): ...
def askopenfilename(**kwargs): ...
imsave = imwrite
TiffReader = TiffFile

# Names in __all__ with no definition:
#   _app_show

def svs_description_metadata(description) -> Dict[str, Any]: ...